import telebot
from telebot import types
import random
import time

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
BOT_TOKEN = "8315023641:AAHLJg0kDC0xtTpgVh8wCd5st1Yjpoe39GM "  # –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω —Å—é–¥–∞
bot = telebot.TeleBot(BOT_TOKEN)

# === –°–ø–∏—Å–∫–∏ –∞–∫—Ç–∏–≤–æ–≤ ===
currency_pairs = [
    "EURUSD OTC", "GBPUSD OTC", "USDJPY OTC", "USDCHF OTC", "AUDUSD OTC",
    "NZDUSD OTC", "USDCAD OTC", "EURGBP OTC", "EURJPY OTC", "EURCHF OTC",
    "GBPJPY OTC", "AUDJPY OTC", "EURCAD OTC", "EURNZD OTC", "AUDNZD OTC",
    "CADJPY OTC", "CHFJPY OTC", "NZDJPY OTC", "GBPCAD OTC", "GBPCHF OTC"
]

stocks = [
    "APPLE OTC", "CISCO OTC", "AMERICAN OTC", "INTEL OTC", "TESLA OTC",
    "AMAZON OTC", "ADVANCED MICRO DEVICES OTC", "ALIBABA OTC", "NETFLIX OTC",
    "BOEING COMPANY OTC", "FACEBOOK INC OTC", "GOOGLE OTC", "MICROSOFT OTC",
    "NIKE OTC", "COCA-COLA OTC", "SONY OTC", "FORD OTC", "ADOBE OTC",
    "VISA OTC", "PEPSICO OTC"
]

crypto = [
    "BITCOIN OTC", "BITCOIN ETF", "ETHERIUM OTC", "POLYGON OTC",
    "CARDANO OTC", "TRON OTC", "TONCOIN OTC", "BNB OTC", "CHAINLINK OTC",
    "SOLANA OTC", "DOGECOIN OTC", "POLKADOT OTC"
]

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üí± –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã")
    btn2 = types.KeyboardButton("üìà –ê–∫—Ü–∏–∏")
    btn3 = types.KeyboardButton("üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")
    markup.add(btn1, btn2, btn3)
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-—Å–∏–≥–Ω–∞–ª—å—â–∏–∫. –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª:",
        reply_markup=markup
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===
@bot.message_handler(func=lambda message: message.text in ["üí± –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã", "üìà –ê–∫—Ü–∏–∏", "üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"])
def choose_asset(message):
    if message.text == "üí± –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã":
        show_assets(message, currency_pairs, "–≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É")
    elif message.text == "üìà –ê–∫—Ü–∏–∏":
        show_assets(message, stocks, "–∞–∫—Ü–∏—é")
    elif message.text == "üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã":
        show_assets(message, crypto, "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É")

def show_assets(message, assets, asset_type):
    markup = types.InlineKeyboardMarkup()
    for asset in assets[:5]:
        markup.add(types.InlineKeyboardButton(asset, callback_data=asset))
    markup.add(types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"next_{asset_type}_5"))
    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏ {asset_type}:", reply_markup=markup)

# === –ü–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤ ===
@bot.callback_query_handler(func=lambda call: call.data.startswith("next_"))
def next_assets(call):
    parts = call.data.split("_")
    asset_type = parts[1]
    start_index = int(parts[2])
    assets = currency_pairs if asset_type == "–≤–∞–ª—é—Ç–Ω—É—é" else stocks if asset_type == "–∞–∫—Ü–∏—é" else crypto
    markup = types.InlineKeyboardMarkup()
    for asset in assets[start_index:start_index + 5]:
        markup.add(types.InlineKeyboardButton(asset, callback_data=asset))
    if start_index + 5 < len(assets):
        markup.add(types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"next_{asset_type}_{start_index + 5}"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_{asset_type}_{max(start_index - 5, 0)}"))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–í—ã–±–µ—Ä–∏ {asset_type}:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("back_"))
def back_assets(call):
    parts = call.data.split("_")
    asset_type = parts[1]
    start_index = int(parts[2])
    assets = currency_pairs if asset_type == "–≤–∞–ª—é—Ç–Ω—É—é" else stocks if asset_type == "–∞–∫—Ü–∏—é" else crypto
    markup = types.InlineKeyboardMarkup()
    for asset in assets[start_index:start_index + 5]:
        markup.add(types.InlineKeyboardButton(asset, callback_data=asset))
    if start_index > 0:
        markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_{asset_type}_{max(start_index - 5, 0)}"))
    if start_index + 5 < len(assets):
        markup.add(types.InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"next_{asset_type}_{start_index + 5}"))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"–í—ã–±–µ—Ä–∏ {asset_type}:", reply_markup=markup)

# === –°–∏–≥–Ω–∞–ª—ã ===
@bot.callback_query_handler(func=lambda call: call.data in currency_pairs + stocks + crypto)
def send_signal(call):
    direction = random.choice(["üìà –í–í–ï–†–•", "üìâ –í–ù–ò–ó"])
    duration = random.choice(["1 –º–∏–Ω—É—Ç–∞", "3 –º–∏–Ω—É—Ç—ã", "5 –º–∏–Ω—É—Ç"])
    bot.send_message(call.message.chat.id, f"‚ö° –°–∏–≥–Ω–∞–ª –¥–ª—è {call.data}\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n–í—Ä–µ–º—è: {duration}")

    # —Å–∏–º—É–ª—è—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    time.sleep(3)
    result = random.choice(["‚úÖ –°–∏–≥–Ω–∞–ª –≤ –ø–ª—é—Å", "‚ùå –°–∏–≥–Ω–∞–ª –≤ –º–∏–Ω—É—Å"])
    bot.send_message(call.message.chat.id, f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")

    # –∫–Ω–æ–ø–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üì• –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª"))
    bot.send_message(call.message.chat.id, "–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª?", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üì• –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª")
def new_signal(message):
    start(message)

# === –ó–∞–ø—É—Å–∫ ===
bot.polling(none_stop=True)
