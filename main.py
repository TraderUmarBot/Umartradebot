import telebot
import random
import time
from threading import Thread
import os

TOKEN = os.getenv("BOT_TOKEN") 

bot = telebot.TeleBot(TOKEN)

# --- –°–ü–ò–°–û–ö –ê–ö–¢–ò–í–û–í ---
currency_pairs = [
    "EUR/USD OTC", "GBP/USD OTC", "USD/JPY OTC", "AUD/USD OTC", "USD/CHF OTC",
    "EUR/JPY OTC", "GBP/JPY OTC", "NZD/USD OTC", "EUR/GBP OTC", "CAD/JPY OTC",
    "USD/CAD OTC", "AUD/JPY OTC", "EUR/AUD OTC", "GBP/AUD OTC", "EUR/NZD OTC",
    "AUD/NZD OTC", "CAD/CHF OTC", "CHF/JPY OTC", "NZD/JPY OTC", "GBP/CAD OTC"
]

crypto_pairs = [
    "BITCOIN OTC", "BITCOIN ETF", "ETHERIUM OTC", "POLYGON OTC", "CARDANO OTC",
    "TRON OTC", "TONCOIN OTC", "BNB OTC", "CHAINLINK OTC", "SOLANA OTC",
    "DOGECOIN OTC", "POLKADOT OTC"
]

stock_pairs = [
    "APPLE OTC", "CISCO OTC", "AMERICAN OTC", "INTEL OTC", "TESLA OTC",
    "AMAZON OTC", "ADVANCED MICRO DEVICES OTC", "ALIBABA OTC", "NETFLIX OTC",
    "BOEING COMPANY OTC", "FACEBOOK INC OTC"
]

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê ---
def analyze_market(asset):
    """–ò–º–∏—Ç–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
    direction = random.choice(["–í–í–ï–†–•", "–í–ù–ò–ó"])
    accuracy = random.randint(80, 95)  # –ü—Ä–æ—Ö–æ–¥–∏–º–æ—Å—Ç—å
    return direction, accuracy

# --- –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ---
@bot.message_handler(commands=['start'])
def start(message):
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üí± –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã", "üìà –ê–∫—Ü–∏–∏", "üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç-—Å–∏–≥–Ω–∞–ª—å—â–∏–∫ üìä\n\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

# --- –í–´–ë–û–† –ê–ö–¢–ò–í–ê ---
@bot.message_handler(func=lambda m: m.text in ["üí± –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã", "üìà –ê–∫—Ü–∏–∏", "üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"])
def choose_asset(message):
    category = message.text
    if category == "üí± –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã":
        assets = currency_pairs
    elif category == "üìà –ê–∫—Ü–∏–∏":
        assets = stock_pairs
    else:
        assets = crypto_pairs

    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    for a in assets[:5]:
        markup.add(telebot.types.InlineKeyboardButton(a, callback_data=f"asset_{a}"))
    markup.add(
        telebot.types.InlineKeyboardButton("‚û° –í–ø–µ—Ä–µ–¥", callback_data=f"next_{category}_1")
    )
    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏ –∞–∫—Ç–∏–≤ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:", reply_markup=markup)

# --- –ü–ê–ì–ò–ù–ê–¶–ò–Ø ---
@bot.callback_query_handler(func=lambda c: c.data.startswith("next_"))
def next_assets(call):
    parts = call.data.split("_")
    category = parts[1]
    page = int(parts[2])

    assets = {
        "üí± –í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã": currency_pairs,
        "üìà –ê–∫—Ü–∏–∏": stock_pairs,
        "üí∞ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã": crypto_pairs
    }[category]

    start_idx = page * 5
    end_idx = start_idx + 5

    markup = telebot.types.InlineKeyboardMarkup(row_width=2)
    for a in assets[start_idx:end_idx]:
        markup.add(telebot.types.InlineKeyboardButton(a, callback_data=f"asset_{a}"))

    if start_idx > 0:
        markup.add(telebot.types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"next_{category}_{page-1}"))
    if end_idx < len(assets):
        markup.add(telebot.types.InlineKeyboardButton("‚û° –í–ø–µ—Ä–µ–¥", callback_data=f"next_{category}_{page+1}"))

    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=markup)

# --- –ê–ù–ê–õ–ò–ó –ê–ö–¢–ò–í–ê ---
@bot.callback_query_handler(func=lambda c: c.data.startswith("asset_"))
def signal(call):
    asset = call.data.replace("asset_", "")
    direction, accuracy = analyze_market(asset)
    msg = f"""
üìä –°–∏–≥–Ω–∞–ª –ø–æ –∞–∫—Ç–∏–≤—É: *{asset}*
üìà –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: *{direction}*
‚è± –í—Ä–µ–º—è —ç–∫—Å–ø–∏—Ä–∞—Ü–∏–∏: *1 –º–∏–Ω—É—Ç–∞*
üéØ –¢–æ—á–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞: *{accuracy}%*
"""
    markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üíπ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    bot.send_message(call.message.chat.id, msg, parse_mode="Markdown", reply_markup=markup)

# --- –ù–û–í–´–ô –°–ò–ì–ù–ê–õ ---
@bot.message_handler(func=lambda m: m.text == "üíπ –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª")
def new_signal(message):
    start(message)

# --- –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ---
@bot.message_handler(func=lambda m: m.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def to_main(message):
    start(message)

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
def run_bot():
    while True:
        try:
            bot.polling(none_stop=True, timeout=60)
        except Exception as e:
            print("–û—à–∏–±–∫–∞:", e)
            time.sleep(5)

Thread(target=run_bot).start()
